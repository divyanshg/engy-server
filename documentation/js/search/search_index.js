var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ApiResponse.html",[0,0.041,1,1.813]],["body/classes/ApiResponse.html",[0,0.043,1,2.538,2,1.48,3,0.27,4,0.235,5,0.235,6,2.905,7,0.559,8,1.488,9,3.613,10,4.939,11,5.253,12,3.1,13,5.199,14,1.599,15,4.646,16,5.866,17,1.628,18,5.866,19,0.028,20,1.252,21,4.646,22,1.276,23,0.891,24,0.99,25,1.187,26,3.45,27,3.45,28,0.27,29,3.45,30,1.718,31,3.45,32,3.45,33,3.45,34,0.019,35,0.019]],["title/modules/AppModule.html",[36,0.921,37,2.19]],["body/modules/AppModule.html",[0,0.038,3,0.241,4,0.209,5,0.209,19,0.028,28,0.241,34,0.018,35,0.018,36,1.372,37,4.374,38,1.223,39,1.223,40,1.423,41,1.423,42,1.223,43,2.291,44,1.423,45,2.587,46,2.587,47,2.587,48,3.488,49,3.187,50,3.488,51,2.928,52,3.187,53,3.187,54,2.321,55,1.988,56,1.423,57,1.423,58,3.072,59,2.566,60,0.99,61,0.541,62,2.267,63,2.587,64,3.072,65,2.267,66,1.837,67,2.587,68,2.587,69,2.587,70,3.072]],["title/controllers/AuthController.html",[71,1.666,72,2.19]],["body/controllers/AuthController.html",[0,0.033,1,1.454,3,0.208,4,0.181,5,0.181,7,0.431,19,0.028,20,1.017,22,1.688,23,1.178,24,0.469,25,1.57,28,0.208,30,1.432,34,0.016,35,0.016,60,0.902,61,0.469,71,1.336,72,2.556,73,1.454,74,2.24,75,1.963,76,2.24,77,1.332,78,3.872,79,2.056,80,3.844,81,3.26,82,2.661,83,3.014,84,2.661,85,2.661,86,4.103,87,1.462,88,2.661,89,5.328,90,4.103,91,2.661,92,2.661,93,2.661,94,3.872,95,2.661,96,1.591,97,1.963,98,1.756,99,1.756,100,1.963,101,2.292,102,1.963,103,1.454,104,2.661,105,2.857,106,1.756,107,2.661,108,2.661,109,1.454,110,2.661,111,2.661,112,2.661,113,2.661,114,2.857,115,1.963,116,1.059,117,1.059,118,2.661,119,2.661,120,3.872,121,2.661,122,1.854,123,1.661,124,2.24,125,2.661,126,1.591,127,3.872,128,2.24,129,1.963,130,1.963,131,2.661,132,2.24,133,2.661,134,1.591,135,2.661,136,1.963,137,2.661,138,2.661,139,1.963,140,2.661,141,2.661]],["title/modules/AuthModule.html",[36,0.921,48,1.984]],["body/modules/AuthModule.html",[0,0.038,3,0.24,4,0.208,5,0.208,19,0.028,28,0.24,34,0.018,35,0.018,36,1.369,38,1.219,39,1.219,40,1.419,41,1.419,42,1.219,43,2.287,44,2.287,48,3.86,53,3.183,55,1.983,56,1.419,57,1.419,59,2.56,60,0.989,61,0.54,69,2.578,72,3.258,73,2.339,101,3.216,102,2.26,142,2.578,143,2.578,144,2.578,145,3.062,146,3.485,147,3.485,148,3.062,149,3.062,150,2.26,151,4.281,152,1.673,153,3.062,154,3.062,155,3.062,156,3.062,157,3.604,158,3.062,159,3.062,160,3.062]],["title/injectables/AuthService.html",[101,1.666,161,0.685]],["body/injectables/AuthService.html",[0,0.028,1,1.21,3,0.174,4,0.151,5,0.151,7,0.359,9,2.02,14,1.565,17,1.546,19,0.028,20,1.02,22,1.694,23,1.182,24,0.916,25,1.576,28,0.174,30,1.249,34,0.014,35,0.014,60,0.903,61,0.39,77,1.162,79,2.111,80,2.844,81,2.844,87,1.311,90,1.635,101,1.696,116,2.151,117,2.068,122,1.824,123,1.449,126,3.414,128,1.865,136,2.493,150,1.635,161,0.697,162,0.882,163,1.865,164,3.378,165,2.215,166,2.502,167,5.405,168,2.215,169,3.378,170,3.378,171,2.23,172,2.215,173,3.378,174,3.023,175,2.215,176,3.378,177,4.095,178,2.215,179,2.739,180,2.493,181,2.844,182,1.462,183,1.462,184,2.215,185,1.635,186,1.865,187,2.215,188,3.378,189,2.215,190,2.215,191,2.23,192,2.844,193,1.112,194,1.865,195,1.865,196,3.378,197,2.215,198,2.215,199,2.215,200,1.865,201,2.844,202,2.844,203,3.378,204,1.865,205,3.378,206,2.215,207,2.215,208,2.23,209,2.215,210,3.378,211,2.215,212,1.865,213,2.215,214,1.635,215,1.635]],["title/classes/CreatePropertyDto.html",[0,0.041,216,1.984]],["body/classes/CreatePropertyDto.html",[0,0.058,2,1.992,3,0.364,4,0.316,5,0.316,7,0.753,8,1.799,17,1.559,19,0.026,20,1.034,23,1.559,24,0.818,28,0.364,34,0.023,35,0.023,216,3.36,217,4.145,218,3.91,219,4.644]],["title/classes/CreateRoomDto.html",[0,0.041,220,1.984]],["body/classes/CreateRoomDto.html",[0,0.055,2,1.882,3,0.344,4,0.298,5,0.298,7,0.711,8,1.737,17,1.708,19,0.026,20,1.208,23,1.521,24,0.956,25,1.867,28,0.344,34,0.022,35,0.022,217,4.347,220,3.245,221,3.237,222,4.347,223,3.694,224,4.387]],["title/modules/GatewayModule.html",[36,0.921,49,1.813]],["body/modules/GatewayModule.html",[0,0.052,3,0.326,4,0.283,5,0.283,19,0.027,28,0.326,34,0.022,35,0.022,36,1.595,38,1.655,39,1.655,40,1.926,41,1.926,42,1.655,43,2.431,44,2.664,49,3.402,55,2.431,56,1.926,57,1.926,60,0.851,61,0.733,225,3.501,226,3.501,227,3.568,228,4.158,229,4.158]],["title/classes/GatewayProvider.html",[0,0.041,227,1.813]],["body/classes/GatewayProvider.html",[0,0.045,2,1.553,3,0.284,4,0.246,5,0.246,7,0.587,8,1.536,17,1.005,19,0.028,20,1.069,24,0.638,28,0.284,34,0.02,35,0.02,60,0.873,61,0.638,77,1.851,83,2.39,87,1.159,98,2.39,134,3.664,227,2.621,230,3.048,231,3.54,232,4.612,233,5.382,234,3.621,235,3.621,236,3.048,237,3.048,238,4.798,239,3.048,240,3.621,241,3.621,242,3.621,243,3.621,244,3.621,245,3.621,246,3.621,247,3.621,248,2.165,249,3.621]],["title/interfaces/InputData.html",[250,1.984,251,1.984]],["body/interfaces/InputData.html",[3,0.18,4,0.156,5,0.156,7,0.372,8,1.804,12,1.152,17,1.855,19,0.028,23,1.412,24,0.993,28,0.392,30,0.849,34,0.014,35,0.014,60,0.372,116,2.376,122,1.725,123,0.985,171,2.291,193,2.828,248,1.373,250,2.075,251,2.789,252,1.694,253,1.373,254,4.157,255,4.743,256,3.088,257,2.762,258,1.933,259,1.515,260,1.896,261,3.088,262,2.922,263,3.088,264,1.694,265,1.933,266,1.933,267,2.922,268,1.933,269,3.079,270,3.523,271,1.933,272,1.933,273,1.933,274,1.933,275,2.922,276,1.933,277,1.933,278,1.933,279,1.933,280,1.933,281,1.933,282,2.075,283,1.694,284,1.933,285,1.933,286,1.933,287,1.933,288,1.933,289,1.694,290,1.933,291,1.933,292,1.933,293,1.933,294,1.933,295,1.933,296,1.694,297,2.922,298,1.933,299,1.933,300,1.933,301,1.933,302,1.933,303,1.933]],["title/injectables/JwtAuthGuard.html",[103,1.813,161,0.685]],["body/injectables/JwtAuthGuard.html",[0,0.058,3,0.362,4,0.314,5,0.314,19,0.027,28,0.362,34,0.023,35,0.023,60,0.908,61,0.814,103,3.06,152,2.525,161,1.156,162,1.839,304,3.891,305,3.41,306,3.35,307,5.602,308,3.891]],["title/injectables/JwtStrategy.html",[146,1.984,161,0.685]],["body/injectables/JwtStrategy.html",[0,0.044,3,0.275,4,0.239,5,0.239,7,0.57,14,2.456,19,0.028,20,1.047,22,1.299,23,0.907,24,0.619,25,1.209,28,0.275,30,1.299,34,0.019,35,0.019,60,0.918,61,0.619,77,1.618,79,1.961,87,1.125,96,2.101,99,3.5,122,1.739,146,2.813,152,1.92,157,2.959,161,0.971,162,1.398,194,2.959,195,2.959,306,2.813,309,2.959,310,3.96,311,3.96,312,3.514,313,4.703,314,3.514,315,3.514,316,2.959,317,2.593,318,2.959,319,2.959,320,2.959,321,3.514,322,3.514,323,3.514,324,3.514,325,3.514,326,3.514,327,3.514,328,3.514,329,3.514]],["title/injectables/LocalAuthGuard.html",[106,2.19,161,0.685]],["body/injectables/LocalAuthGuard.html",[0,0.058,3,0.362,4,0.314,5,0.314,19,0.027,28,0.362,34,0.023,35,0.023,60,0.908,61,0.814,106,3.698,152,2.525,161,1.156,162,1.839,305,3.41,306,3.35,308,3.891,330,3.891,331,5.602]],["title/injectables/LocalStrategy.html",[147,1.984,161,0.685]],["body/injectables/LocalStrategy.html",[0,0.041,3,0.255,4,0.221,5,0.221,7,0.527,14,1.506,17,1.647,19,0.028,20,0.994,22,1.65,23,1.151,24,0.786,25,1.535,28,0.255,34,0.018,35,0.018,60,0.889,61,0.573,77,1.535,79,1.884,87,1.041,101,2.98,102,2.398,109,1.776,116,1.775,117,1.293,122,1.202,123,1.394,126,2.668,147,2.668,152,1.776,161,0.921,162,1.293,179,2.668,180,3.292,191,3.619,208,2.146,306,2.668,310,3.756,311,3.756,316,2.737,317,2.398,319,2.737,320,2.737,332,2.737,333,3.25,334,3.25,335,4.461,336,3.25,337,2.737,338,4.461,339,3.25,340,5.094,341,3.25,342,3.25]],["title/classes/LoginDto.html",[0,0.041,343,2.448]],["body/classes/LoginDto.html",[0,0.056,2,1.926,3,0.352,4,0.305,5,0.305,7,0.728,8,1.763,17,1.722,19,0.027,20,1.226,24,0.97,28,0.352,34,0.023,35,0.023,179,3.56,191,3.929,343,4.062,344,3.781,345,4.491,346,4.491]],["title/modules/MediaServerModule.html",[36,0.921,50,1.984]],["body/modules/MediaServerModule.html",[0,0.033,3,0.204,4,0.178,5,0.178,9,1.561,19,0.028,20,0.581,28,0.204,34,0.016,35,0.016,36,1.253,38,1.038,39,1.038,40,1.209,41,1.209,42,1.038,43,2.092,44,1.209,50,3.627,52,3.017,54,2.198,55,1.769,56,1.209,57,1.209,59,2.283,60,0.857,61,0.46,62,1.926,63,3.215,66,1.561,67,2.197,76,2.197,77,0.898,79,0.965,87,0.836,109,1.426,114,2.817,116,2.104,117,1.038,123,1.119,134,1.561,193,1.31,208,2.52,231,1.926,232,3.901,236,2.197,248,2.7,347,2.197,348,2.61,349,2.197,350,2.71,351,3.818,352,2.61,353,2.61,354,4.515,355,2.197,356,2.61,357,1.561,358,2.61,359,2.61,360,2.61,361,3.818,362,2.61,363,2.61,364,2.61,365,2.61,366,2.61,367,2.61,368,2.61,369,2.61,370,2.61,371,2.61,372,2.61,373,2.197,374,2.61,375,2.61,376,2.61,377,2.61,378,2.61,379,2.61,380,2.61,381,2.61,382,2.61,383,3.818,384,3.818,385,3.818,386,2.086,387,2.61,388,2.61]],["title/interfaces/OutputData.html",[250,1.984,260,1.813]],["body/interfaces/OutputData.html",[3,0.18,4,0.156,5,0.156,7,0.372,8,1.804,12,1.152,17,1.855,19,0.028,23,1.412,24,0.993,28,0.392,30,0.849,34,0.014,35,0.014,60,0.372,116,2.376,122,1.725,123,0.985,171,2.291,193,2.828,248,1.373,250,2.075,251,2.502,252,1.694,253,1.373,254,4.157,255,4.743,256,3.088,257,2.762,258,1.933,259,1.515,260,2.286,261,3.088,262,2.922,263,3.088,264,1.694,265,1.933,266,1.933,267,2.922,268,1.933,269,3.079,270,3.523,271,1.933,272,1.933,273,1.933,274,1.933,275,2.922,276,1.933,277,1.933,278,1.933,279,1.933,280,1.933,281,1.933,282,2.075,283,1.694,284,1.933,285,1.933,286,1.933,287,1.933,288,1.933,289,1.694,290,1.933,291,1.933,292,1.933,293,1.933,294,1.933,295,1.933,296,1.694,297,2.922,298,1.933,299,1.933,300,1.933,301,1.933,302,1.933,303,1.933]],["title/modules/PrismaModule.html",[36,0.921,51,1.666]],["body/modules/PrismaModule.html",[0,0.05,3,0.313,4,0.272,5,0.272,19,0.027,28,0.313,34,0.021,35,0.021,36,1.567,38,1.592,39,1.592,40,1.854,41,1.854,42,1.592,43,2.617,44,2.617,51,3.213,54,2.657,55,2.372,56,1.854,57,1.854,60,0.83,61,0.705,389,3.368,390,3.368,391,4.001,392,4.001,393,4.001]],["title/injectables/PrismaService.html",[54,1.32,161,0.685]],["body/injectables/PrismaService.html",[0,0.052,3,0.329,4,0.285,5,0.285,7,0.68,19,0.027,20,0.934,28,0.329,34,0.022,35,0.022,54,2.1,60,0.856,61,0.739,77,1.815,79,2.135,87,1.343,117,1.669,161,1.089,162,1.669,183,2.769,231,3.095,232,4.702,306,3.155,394,3.531,395,5.773,396,4.194,397,4.194]],["title/controllers/PropertyController.html",[71,1.666,398,2.19]],["body/controllers/PropertyController.html",[0,0.022,1,1.916,3,0.136,4,0.118,5,0.118,7,0.282,8,1.123,9,1.673,14,0.807,17,1.684,19,0.028,20,0.781,22,1.297,23,1.212,24,0.618,25,1.206,28,0.136,30,1.297,34,0.011,35,0.011,60,0.8,61,0.307,71,0.874,73,0.952,75,1.285,77,0.963,79,1.959,83,2.315,86,2.588,87,1.123,90,1.285,96,1.042,97,2.065,98,1.15,99,3.259,100,1.285,103,0.952,105,1.285,115,2.588,116,1.965,117,1.965,122,2.054,123,2.382,124,1.466,126,1.673,129,2.588,130,1.285,132,2.953,136,3.787,139,2.065,200,1.466,201,2.356,202,2.356,204,1.466,214,1.285,215,2.065,216,2.952,259,2.651,269,1.15,282,2.402,350,1.625,357,1.673,373,1.466,386,2.969,398,1.847,399,1.466,400,1.742,401,2.097,402,1.847,403,2.953,404,1.742,405,4.174,406,2.356,407,1.466,408,1.742,409,1.742,410,1.466,411,1.742,412,1.742,413,4.399,414,2.798,415,1.742,416,1.466,417,1.466,418,1.466,419,1.15,420,1.466,421,1.916,422,1.466,423,1.285,424,1.742,425,1.466,426,2.798,427,2.798,428,2.356,429,3.507,430,3.381,431,1.466,432,1.742,433,1.742,434,1.742,435,2.798,436,1.742,437,1.466,438,2.356,439,2.356,440,1.466,441,1.742,442,1.742,443,1.466,444,1.742,445,1.742,446,1.742,447,1.742,448,1.742,449,1.742,450,1.742,451,1.742,452,1.742,453,1.742,454,2.798,455,1.742,456,1.466,457,1.466]],["title/injectables/PropertyService.html",[161,0.685,421,1.813]],["body/injectables/PropertyService.html",[0,0.027,3,0.173,4,0.15,5,0.15,7,0.358,9,2.013,12,1.69,14,1.56,17,1.766,19,0.028,20,1.096,22,1.82,23,1.598,24,0.805,25,1.693,28,0.173,30,1.69,34,0.014,35,0.014,54,1.818,60,0.741,61,0.389,66,1.319,77,1.158,79,2.218,87,1.463,116,0.878,117,1.958,122,1.69,123,0.946,161,0.695,162,0.878,182,2.222,193,1.107,216,2.013,227,2.496,248,3.327,254,1.627,257,2.222,259,3.424,261,1.627,282,2.013,289,1.627,357,1.319,401,2.442,402,2.222,403,2.834,405,1.627,419,1.456,420,1.857,421,1.839,431,2.834,458,1.857,459,1.627,460,4.083,461,2.205,462,3.366,463,2.205,464,3.366,465,2.205,466,3.366,467,2.205,468,3.366,469,2.205,470,2.205,471,2.205,472,2.205,473,4.083,474,1.857,475,2.205,476,2.205,477,2.205,478,2.205,479,2.205,480,2.205,481,2.205,482,2.205,483,2.205]],["title/classes/RegisterDto.html",[0,0.041,174,2.19]],["body/classes/RegisterDto.html",[0,0.054,2,1.848,3,0.337,4,0.293,5,0.293,7,0.699,8,1.718,17,1.78,19,0.027,20,1.301,23,1.508,24,1.03,28,0.337,34,0.022,35,0.022,174,3.542,179,3.494,191,3.857,484,3.627,485,4.308,486,4.308,487,4.308]],["title/classes/Room.html",[0,0.041,386,1.813]],["body/classes/Room.html",[0,0.062,2,2.149,3,0.392,4,0.341,5,0.341,19,0.026,28,0.392,34,0.024,35,0.024,386,3.211,488,4.218]],["title/controllers/RoomController.html",[71,1.666,489,2.19]],["body/controllers/RoomController.html",[0,0.022,3,0.137,4,0.119,5,0.119,7,0.283,10,4.465,12,1.765,13,4.328,17,1.372,19,0.028,20,0.896,22,1.488,23,1.039,24,0.777,25,1.384,28,0.137,30,1.3,34,0.012,35,0.012,60,0.763,61,0.308,71,0.878,73,0.955,75,1.29,77,0.965,79,2.128,83,2.656,86,2.594,87,1.289,96,1.045,97,1.29,98,1.154,99,3.592,100,1.29,103,0.955,105,1.29,109,0.955,115,2.969,116,1.601,117,1.754,122,2.056,126,2.407,129,2.969,130,2.594,139,2.594,180,2.071,186,1.472,192,2.363,193,2.213,214,1.29,215,2.071,220,2.957,222,1.29,260,1.533,350,1.629,357,1.045,386,2.571,401,1.678,402,1.852,406,2.363,407,1.472,410,1.472,416,1.472,417,3.388,418,1.472,419,1.154,423,1.29,425,1.472,428,2.363,430,2.363,437,1.472,438,1.472,439,1.472,440,1.472,443,2.96,456,2.96,457,1.472,489,1.852,490,1.472,491,3.516,492,2.594,493,2.363,494,1.472,495,1.748,496,1.748,497,1.748,498,1.472,499,1.748,500,1.748,501,1.472,502,2.806,503,1.748,504,1.748,505,1.748,506,1.29,507,1.472,508,1.748,509,1.748,510,1.748,511,2.806,512,1.748,513,4.024,514,1.748,515,1.748,516,1.748,517,1.748,518,1.748,519,1.748,520,1.748,521,1.748,522,1.748,523,1.748,524,1.748,525,1.045,526,1.748,527,1.748,528,1.748]],["title/modules/RoomModule.html",[36,0.921,52,1.813]],["body/modules/RoomModule.html",[0,0.042,3,0.262,4,0.227,5,0.227,19,0.028,28,0.262,34,0.019,35,0.019,36,1.434,38,1.33,39,1.33,40,1.548,41,1.548,42,1.33,43,2.394,44,1.548,49,3.27,51,3.005,52,3.551,55,2.106,56,1.548,57,1.548,59,2.719,60,0.993,61,0.589,65,2.465,68,2.813,73,2.484,350,2.773,398,3.411,421,3.27,422,2.813,423,2.465,489,3.411,529,2.813,530,2.813,531,3.341,532,3.341,533,3.341,534,3.341]],["title/injectables/RoomService.html",[161,0.685,350,1.537]],["body/injectables/RoomService.html",[0,0.027,3,0.168,4,0.146,5,0.146,7,0.349,8,0.689,12,1.658,14,0.996,17,1.759,19,0.028,20,1.144,22,1.899,23,1.38,24,0.905,25,1.767,28,0.168,30,1.799,34,0.014,35,0.014,54,1.795,60,0.652,61,0.379,66,1.286,77,1.136,79,2.298,87,1.558,109,1.175,114,1.587,116,0.856,117,2.044,122,1.899,161,0.682,162,0.856,182,2.18,193,2.579,208,2.18,220,2.91,222,3.946,257,1.419,350,1.53,401,1.975,402,2.18,405,3.328,419,1.419,459,1.587,474,2.78,492,2.437,493,2.78,494,2.78,498,2.78,501,2.78,507,1.811,525,1.975,535,1.811,536,3.302,537,2.15,538,2.15,539,3.302,540,2.15,541,3.302,542,2.15,543,2.15,544,2.15,545,3.302,546,2.15,547,2.15,548,2.15,549,2.15,550,3.302,551,2.15,552,2.15,553,2.15,554,2.15,555,2.15,556,2.15]],["title/classes/UpdateRoomDto.html",[0,0.041,525,1.984]],["body/classes/UpdateRoomDto.html",[0,0.058,2,2.011,3,0.367,4,0.319,5,0.319,7,0.76,8,1.81,19,0.026,20,1.044,24,0.826,28,0.367,34,0.023,35,0.023,221,3.46,223,3.948,525,3.38,557,4.758,558,6.067]],["title/modules/UserModule.html",[36,0.921,53,1.813]],["body/modules/UserModule.html",[0,0.047,3,0.294,4,0.255,5,0.255,19,0.027,28,0.294,34,0.02,35,0.02,36,1.519,38,1.492,39,1.492,40,1.737,41,1.737,42,1.492,43,2.536,44,2.536,51,3.106,53,3.533,55,2.275,56,1.737,57,1.737,59,2.936,60,0.888,61,0.661,65,2.766,166,3.615,559,3.156,560,3.156,561,3.749,562,3.156,563,3.749,564,3.749]],["title/injectables/UserService.html",[161,0.685,166,1.813]],["body/injectables/UserService.html",[0,0.042,3,0.264,4,0.229,5,0.229,7,0.546,12,2.293,14,1.559,19,0.028,20,1.155,22,1.918,23,1.339,24,0.914,25,1.784,28,0.264,30,1.689,34,0.019,35,0.019,54,2.214,60,0.841,61,0.593,66,2.012,77,1.571,79,2.218,87,1.463,109,1.838,117,1.818,122,1.689,161,0.943,162,1.339,166,2.496,182,3.423,183,2.221,212,4.367,357,2.012,401,2.732,459,2.483,492,3.371,565,2.833,566,3.365,567,4.568,568,3.365,569,4.568,570,5.186,571,3.365,572,4.568,573,3.365,574,3.365]],["title/coverage.html",[575,3.339]],["body/coverage.html",[0,0.074,1,1.487,5,0.185,6,2.291,19,0.028,24,0.48,34,0.016,35,0.016,42,1.083,54,1.083,71,2.322,72,1.796,74,2.291,101,1.366,103,1.487,106,1.796,123,1.167,146,1.627,147,1.627,161,1.245,163,2.291,166,1.487,174,1.796,185,2.008,216,1.627,217,2.904,218,2.291,220,1.627,221,2.904,227,1.487,230,2.291,250,2.354,251,1.627,253,3.215,260,1.487,263,3.739,269,4.42,304,2.291,305,2.904,309,2.291,330,2.291,332,2.291,343,2.008,344,2.291,350,1.261,386,1.487,394,2.291,398,1.796,399,2.291,421,1.487,458,2.291,484,2.291,488,2.291,489,1.796,490,2.291,506,2.008,525,1.627,535,2.291,557,2.291,565,2.291,575,2.008,576,2.721,577,2.721,578,2.721,579,4.624,580,5.067,581,5.376,582,5.779,583,2.291,584,4.624,585,4.624,586,2.721,587,2.291,588,2.721,589,2.721]],["title/dependencies.html",[39,1.588,590,2.334]],["body/dependencies.html",[19,0.028,34,0.02,35,0.02,39,1.534,61,0.679,62,2.844,96,2.305,134,2.305,150,2.844,152,2.106,181,3.246,183,2.545,237,3.246,239,3.246,256,2.844,317,4.094,318,3.246,337,3.246,355,3.246,591,5.549,592,3.855,593,3.855,594,3.855,595,3.855,596,3.855,597,4.999,598,4.999,599,3.855,600,3.855,601,3.855,602,3.855,603,3.855,604,3.855,605,3.855,606,3.855,607,3.855,608,3.855,609,3.855,610,3.855,611,3.855,612,3.855,613,3.855,614,3.855,615,3.855]],["title/miscellaneous/functions.html",[616,1.83,617,3.359]],["body/miscellaneous/functions.html",[7,0.677,17,1.598,19,0.026,22,2.13,23,1.487,24,0.927,25,1.982,34,0.022,35,0.022,42,2.293,87,1.685,179,2.497,185,3.882,251,3.445,253,2.497,260,2.281,264,3.081,283,3.081,296,3.081,506,3.882,583,3.516,587,4.43,616,2.756,617,3.516,618,4.176,619,4.851,620,4.176]],["title/index.html",[7,0.45,621,2.773,622,2.773]],["body/index.html",[4,0.236,19,0.027,34,0.019,35,0.019,134,2.071,575,2.555,623,3.463,624,3.463,625,4.657,626,3.463,627,3.463,628,3.463,629,3.463,630,3.463,631,2.916,632,5.263,633,3.463,634,3.463,635,3.463,636,3.463,637,5.263,638,6.181,639,3.463,640,3.463,641,3.463,642,6.049,643,3.463,644,3.463,645,4.657,646,3.463,647,3.463,648,3.463,649,3.463,650,4.657,651,4.657,652,3.463,653,3.463,654,3.463,655,4.657,656,4.657,657,3.463,658,3.463,659,3.463,660,3.463,661,3.463,662,2.916,663,3.463,664,3.463,665,3.463,666,3.463,667,3.463,668,3.463,669,3.463,670,3.463,671,3.463,672,3.463,673,2.916,674,3.463,675,3.463,676,3.463,677,3.463,678,3.463,679,3.463,680,2.916]],["title/modules.html",[38,1.801]],["body/modules.html",[19,0.022,34,0.022,35,0.022,37,2.909,38,1.754,48,2.636,49,2.408,50,2.636,51,2.213,52,2.408,53,2.408,662,5.505,681,6.538,682,6.538,683,6.538]],["title/overview.html",[684,3.81]],["body/overview.html",[2,1.151,19,0.027,34,0.016,35,0.016,36,0.744,37,4.255,38,1.068,39,1.068,40,1.243,41,1.243,42,1.068,43,1.243,44,1.243,45,2.259,46,2.259,47,2.259,48,3.738,49,2.921,50,3.593,51,2.959,52,3.415,53,3.283,54,2.391,55,1.805,56,1.243,57,1.243,73,1.466,101,2.889,142,2.259,143,2.259,144,2.259,146,2.743,147,2.743,162,1.068,166,3.144,225,2.259,226,2.259,227,2.75,252,1.98,347,2.259,349,2.259,350,2.332,389,2.259,390,2.259,421,2.506,529,2.259,530,2.259,559,2.259,560,2.259,562,2.259,684,2.259,685,2.683,686,2.683,687,2.683,688,2.683,689,2.683]],["title/properties.html",[8,1.277,590,2.334]],["body/properties.html",[8,1.596,19,0.027,34,0.024,35,0.024,631,4.196,673,4.196,680,4.196,690,4.984,691,4.984,692,4.984]],["title/miscellaneous/typealiases.html",[616,1.83,693,3.99]],["body/miscellaneous/typealiases.html",[7,0.812,19,0.024,24,1.036,34,0.024,35,0.024,171,3.307,253,2.996,282,3.515,616,3.307,619,4.218,694,5.01]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/ApiResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"modules/GatewayModule.html":{},"classes/GatewayProvider.html":{},"interfaces/InputData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"modules/MediaServerModule.html":{},"interfaces/OutputData.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"classes/RegisterDto.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":269,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"controllers/PropertyController.html":{},"coverage.html":{}}}],["0.0.1",{"_index":691,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":608,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":582,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":584,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":581,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":580,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":585,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":586,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":479,"title":{},"body":{"injectables/PropertyService.html":{}}}],["1).tostring().padstart(2",{"_index":272,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["1.0.0",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["10.0.0",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["10.3.2",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["1935",{"_index":362,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["2",{"_index":689,"title":{},"body":{"overview.html":{}}}],["2.6.2",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["2.8.3",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":456,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["201",{"_index":437,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["3",{"_index":686,"title":{},"body":{"overview.html":{}}}],["30",{"_index":367,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["30d",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{}}}],["4.0.1",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":520,"title":{},"body":{"controllers/RoomController.html":{}}}],["5.1.1",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["5.9.1",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":513,"title":{},"body":{"controllers/RoomController.html":{}}}],["60",{"_index":369,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["60000",{"_index":364,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["7",{"_index":685,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":688,"title":{},"body":{"overview.html":{}}}],["8000",{"_index":371,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["9",{"_index":687,"title":{},"body":{"overview.html":{}}}],["_user",{"_index":340,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["access_token",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["admin",{"_index":375,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["aliases",{"_index":694,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow_origin",{"_index":372,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["already",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PropertyController.html":{}}}],["amazing",{"_index":663,"title":{},"body":{"index.html":{}}}],["api",{"_index":373,"title":{},"body":{"modules/MediaServerModule.html":{},"controllers/PropertyController.html":{}}}],["api_pass",{"_index":376,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["api_user",{"_index":374,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["apikey",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"modules/MediaServerModule.html":{},"injectables/RoomService.html":{}}}],["apiresponse",{"_index":1,"title":{"classes/ApiResponse.html":{}},"body":{"classes/ApiResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PropertyController.html":{},"coverage.html":{}}}],["apiresponse(200",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PropertyController.html":{}}}],["apiresponse(201",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["apiresponse(400",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PropertyController.html":{}}}],["apiresponse(401",{"_index":429,"title":{},"body":{"controllers/PropertyController.html":{}}}],["apiresponse(403",{"_index":447,"title":{},"body":{"controllers/PropertyController.html":{}}}],["apiresponse(500",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PropertyController.html":{}}}],["app",{"_index":640,"title":{},"body":{"index.html":{}}}],["applications",{"_index":630,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":37,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":380,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["args.key",{"_index":382,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["async",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/MediaServerModule.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"modules/MediaServerModule.html":{}}}],["auth.controller",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["auth.guard.ts",{"_index":305,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/jwt",{"_index":418,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["authcontroller",{"_index":72,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":308,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":307,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":331,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":48,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":673,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":101,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"modules/MediaServerModule.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":664,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(user.password",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["before",{"_index":451,"title":{},"body":{"controllers/PropertyController.html":{}}}],["body",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["bootstrap",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GatewayModule.html":{},"modules/MediaServerModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":683,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":681,"title":{},"body":{"modules.html":{}}}],["building",{"_index":626,"title":{},"body":{"index.html":{}}}],["catch",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["check",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PropertyController.html":{}}}],["chunk_size",{"_index":363,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["class",{"_index":0,"title":{"classes/ApiResponse.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"classes/GatewayProvider.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/Room.html":{},"classes/UpdateRoomDto.html":{}},"body":{"classes/ApiResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"modules/GatewayModule.html":{},"classes/GatewayProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"modules/MediaServerModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"classes/RegisterDto.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ApiResponse.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"classes/GatewayProvider.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/Room.html":{},"classes/UpdateRoomDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_gatewaymodule",{"_index":225,"title":{},"body":{"modules/GatewayModule.html":{},"overview.html":{}}}],["cluster_gatewaymodule_exports",{"_index":226,"title":{},"body":{"modules/GatewayModule.html":{},"overview.html":{}}}],["cluster_mediaservermodule",{"_index":347,"title":{},"body":{"modules/MediaServerModule.html":{},"overview.html":{}}}],["cluster_mediaservermodule_imports",{"_index":348,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["cluster_mediaservermodule_providers",{"_index":349,"title":{},"body":{"modules/MediaServerModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":389,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":390,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":391,"title":{},"body":{"modules/PrismaModule.html":{}}}],["cluster_roommodule",{"_index":529,"title":{},"body":{"modules/RoomModule.html":{},"overview.html":{}}}],["cluster_roommodule_imports",{"_index":531,"title":{},"body":{"modules/RoomModule.html":{}}}],["cluster_roommodule_providers",{"_index":530,"title":{},"body":{"modules/RoomModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":559,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":562,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":561,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":560,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":10,"title":{},"body":{"classes/ApiResponse.html":{},"controllers/RoomController.html":{}}}],["connected",{"_index":246,"title":{},"body":{"classes/GatewayProvider.html":{}}}],["console.log('client",{"_index":245,"title":{},"body":{"classes/GatewayProvider.html":{}}}],["console.log('user",{"_index":510,"title":{},"body":{"controllers/RoomController.html":{}}}],["console.log(err",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/InputData.html":{},"injectables/LocalStrategy.html":{},"modules/MediaServerModule.html":{},"interfaces/OutputData.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["constructor",{"_index":14,"title":{},"body":{"classes/ApiResponse.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":333,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(code",{"_index":15,"title":{},"body":{"classes/ApiResponse.html":{}}}],["constructor(prisma",{"_index":459,"title":{},"body":{"injectables/PropertyService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"modules/MediaServerModule.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["constructor(usersservice",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":71,"title":{"controllers/AuthController.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('rooms",{"_index":508,"title":{},"body":{"controllers/RoomController.html":{}}}],["controller('rooms/:room_id/property",{"_index":424,"title":{},"body":{"controllers/PropertyController.html":{}}}],["controllers",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"overview.html":{}}}],["cookie",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["cors",{"_index":240,"title":{},"body":{"classes/GatewayProvider.html":{}}}],["coverage",{"_index":575,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":401,"title":{},"body":{"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":509,"title":{},"body":{"controllers/RoomController.html":{}}}],["create(createpropertydto",{"_index":404,"title":{},"body":{"controllers/PropertyController.html":{}}}],["create(createroomdto",{"_index":494,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["create(data",{"_index":567,"title":{},"body":{"injectables/UserService.html":{}}}],["create(property",{"_index":462,"title":{},"body":{"injectables/PropertyService.html":{}}}],["created",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["createdat",{"_index":254,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"injectables/PropertyService.html":{}}}],["createdproperty",{"_index":435,"title":{},"body":{"controllers/PropertyController.html":{}}}],["createdroom",{"_index":511,"title":{},"body":{"controllers/RoomController.html":{}}}],["createduser",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["createhash('sha256",{"_index":300,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["createpropertydto",{"_index":216,"title":{"classes/CreatePropertyDto.html":{}},"body":{"classes/CreatePropertyDto.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"coverage.html":{}}}],["createpropertydto.name",{"_index":433,"title":{},"body":{"controllers/PropertyController.html":{}}}],["createroomdto",{"_index":220,"title":{"classes/CreateRoomDto.html":{}},"body":{"classes/CreateRoomDto.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"coverage.html":{}}}],["createroomdto.name",{"_index":547,"title":{},"body":{"injectables/RoomService.html":{}}}],["createroomdto.ownerid",{"_index":548,"title":{},"body":{"injectables/RoomService.html":{}}}],["crypto",{"_index":256,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"dependencies.html":{}}}],["crypto.randombytes(16).tostring('hex",{"_index":298,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["data",{"_index":12,"title":{},"body":{"classes/ApiResponse.html":{},"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["data.createdat",{"_index":293,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["data.id",{"_index":291,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["data.name",{"_index":292,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["data.properties.map((property",{"_index":285,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["data.updatedat",{"_index":294,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["date",{"_index":265,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["date().toisostring",{"_index":481,"title":{},"body":{"injectables/PropertyService.html":{}}}],["date(datestring",{"_index":266,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["date.getdate().tostring().padstart(2",{"_index":268,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["date.getfullyear",{"_index":276,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["date.gethours().tostring().padstart(2",{"_index":278,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["date.getminutes().tostring().padstart(2",{"_index":280,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["date.getmonth",{"_index":271,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["datestring",{"_index":620,"title":{},"body":{"miscellaneous/functions.html":{}}}],["day",{"_index":267,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["declarations",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GatewayModule.html":{},"modules/MediaServerModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"classes/GatewayProvider.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["default",{"_index":29,"title":{},"body":{"classes/ApiResponse.html":{}}}],["defined",{"_index":20,"title":{},"body":{"classes/ApiResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"classes/GatewayProvider.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"modules/MediaServerModule.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"classes/RegisterDto.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":504,"title":{},"body":{"controllers/RoomController.html":{}}}],["delete('/delete/:id",{"_index":502,"title":{},"body":{"controllers/RoomController.html":{}}}],["dependencies",{"_index":39,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GatewayModule.html":{},"modules/MediaServerModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":477,"title":{},"body":{"injectables/PropertyService.html":{}}}],["description",{"_index":631,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":641,"title":{},"body":{"index.html":{}}}],["dg2024",{"_index":377,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["digest('hex",{"_index":302,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["documentation",{"_index":576,"title":{},"body":{"coverage.html":{}}}],["dto/create",{"_index":419,"title":{},"body":{"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["dto/register.dto",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["e",{"_index":438,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["e.message",{"_index":439,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["e2e",{"_index":652,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":627,"title":{},"body":{"index.html":{}}}],["email",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"miscellaneous/functions.html":{}}}],["err",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["err.message",{"_index":443,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["error",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["example",{"_index":637,"title":{},"body":{"index.html":{}}}],["exists",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PropertyController.html":{}}}],["expiresin",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":28,"title":{},"body":{"classes/ApiResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"modules/GatewayModule.html":{},"classes/GatewayProvider.html":{},"interfaces/InputData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"modules/MediaServerModule.html":{},"interfaces/OutputData.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"classes/RegisterDto.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GatewayModule.html":{},"modules/MediaServerModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{},"dependencies.html":{}}}],["extends",{"_index":306,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{}}}],["extractjwt",{"_index":315,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":322,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":325,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ApiResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"modules/GatewayModule.html":{},"classes/GatewayProvider.html":{},"interfaces/InputData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"modules/MediaServerModule.html":{},"interfaces/OutputData.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"classes/RegisterDto.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":402,"title":{},"body":{"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["findall(@param('room_id",{"_index":441,"title":{},"body":{"controllers/PropertyController.html":{}}}],["findall(@req",{"_index":514,"title":{},"body":{"controllers/RoomController.html":{}}}],["findall(ownerid",{"_index":539,"title":{},"body":{"injectables/RoomService.html":{}}}],["findall(room_id",{"_index":409,"title":{},"body":{"controllers/PropertyController.html":{}}}],["findall(roomid",{"_index":464,"title":{},"body":{"injectables/PropertyService.html":{}}}],["findall(undefined",{"_index":496,"title":{},"body":{"controllers/RoomController.html":{}}}],["findbykey",{"_index":536,"title":{},"body":{"injectables/RoomService.html":{}}}],["findbykey(apikey",{"_index":541,"title":{},"body":{"injectables/RoomService.html":{}}}],["findone",{"_index":492,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["findone(id",{"_index":498,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["findone(uniqueattr",{"_index":569,"title":{},"body":{"injectables/UserService.html":{}}}],["formatdate",{"_index":587,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["formatdate(datestring",{"_index":264,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"miscellaneous/functions.html":{}}}],["formatdate(value.createdat",{"_index":288,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["found",{"_index":430,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["framework",{"_index":625,"title":{},"body":{"index.html":{}}}],["function",{"_index":263,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"coverage.html":{}}}],["functions",{"_index":617,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gateway",{"_index":460,"title":{},"body":{"injectables/PropertyService.html":{}}}],["gateway.provider",{"_index":229,"title":{},"body":{"modules/GatewayModule.html":{}}}],["gateway/gateway.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/RoomModule.html":{}}}],["gateway/gateway.provider",{"_index":470,"title":{},"body":{"injectables/PropertyService.html":{}}}],["gatewaymodule",{"_index":49,"title":{"modules/GatewayModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GatewayModule.html":{},"modules/RoomModule.html":{},"modules.html":{},"overview.html":{}}}],["gatewayprovider",{"_index":227,"title":{"classes/GatewayProvider.html":{}},"body":{"modules/GatewayModule.html":{},"classes/GatewayProvider.html":{},"injectables/PropertyService.html":{},"coverage.html":{},"overview.html":{}}}],["generateapikey",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["generateapikey(email",{"_index":296,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"miscellaneous/functions.html":{}}}],["generateapikey(user.email",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('list",{"_index":440,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["get('profile",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('read/:id",{"_index":516,"title":{},"body":{"controllers/RoomController.html":{}}}],["get('update",{"_index":414,"title":{},"body":{"controllers/PropertyController.html":{}}}],["get('update/:id",{"_index":523,"title":{},"body":{"controllers/RoomController.html":{}}}],["getprofile",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@request",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":621,"title":{"index.html":{}},"body":{}}],["gop_cache",{"_index":365,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["grow",{"_index":659,"title":{},"body":{"index.html":{}}}],["guards/jwt",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["hash",{"_index":299,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["hashedpassword",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["here",{"_index":670,"title":{},"body":{"index.html":{}}}],["hours",{"_index":277,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["hours}:${minutes",{"_index":281,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["http",{"_index":370,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["http://localhost:5173",{"_index":242,"title":{},"body":{"classes/GatewayProvider.html":{}}}],["httponly",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":677,"title":{},"body":{"index.html":{}}}],["id",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/InputData.html":{},"modules/MediaServerModule.html":{},"interfaces/OutputData.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["identifier",{"_index":577,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":324,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":231,"title":{},"body":{"classes/GatewayProvider.html":{},"modules/MediaServerModule.html":{},"injectables/PrismaService.html":{}}}],["import",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/GatewayModule.html":{},"classes/GatewayProvider.html":{},"interfaces/InputData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/MediaServerModule.html":{},"interfaces/OutputData.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MediaServerModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":474,"title":{},"body":{"injectables/PropertyService.html":{},"injectables/RoomService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/ApiResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"classes/GatewayProvider.html":{},"interfaces/InputData.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"interfaces/OutputData.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"classes/RegisterDto.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indexed",{"_index":274,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ApiResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"modules/GatewayModule.html":{},"classes/GatewayProvider.html":{},"interfaces/InputData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"modules/MediaServerModule.html":{},"interfaces/OutputData.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"classes/RegisterDto.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":161,"title":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/PropertyService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/PropertyService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/PropertyService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["inputdata",{"_index":251,"title":{"interfaces/InputData.html":{}},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["installation",{"_index":636,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":639,"title":{},"body":{"index.html":{}}}],["interface",{"_index":250,"title":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"coverage.html":{}}}],["interfaces",{"_index":252,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"overview.html":{}}}],["internal",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["join",{"_index":666,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":318,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":103,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":321,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":146,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":674,"title":{},"body":{"index.html":{}}}],["key",{"_index":413,"title":{},"body":{"controllers/PropertyController.html":{}}}],["last",{"_index":475,"title":{},"body":{"injectables/PropertyService.html":{}}}],["legend",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GatewayModule.html":{},"modules/MediaServerModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":680,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":656,"title":{},"body":{"index.html":{}}}],["literal",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"miscellaneous/typealiases.html":{}}}],["local",{"_index":337,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":106,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":147,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":343,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["matching",{"_index":35,"title":{},"body":{"classes/ApiResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"modules/GatewayModule.html":{},"classes/GatewayProvider.html":{},"interfaces/InputData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"modules/MediaServerModule.html":{},"interfaces/OutputData.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"classes/RegisterDto.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["media",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/MediaServerModule.html":{},"dependencies.html":{}}}],["mediaservermodule",{"_index":50,"title":{"modules/MediaServerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MediaServerModule.html":{},"modules.html":{},"overview.html":{}}}],["message",{"_index":13,"title":{},"body":{"classes/ApiResponse.html":{},"controllers/RoomController.html":{}}}],["metadata",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GatewayProvider.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/MediaServerModule.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["minutes",{"_index":279,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["miscellaneous",{"_index":616,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["missing",{"_index":448,"title":{},"body":{"controllers/PropertyController.html":{}}}],["mit",{"_index":655,"title":{},"body":{"index.html":{}}}],["mode",{"_index":645,"title":{},"body":{"index.html":{}}}],["module",{"_index":36,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GatewayModule.html":{},"modules/MediaServerModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GatewayModule.html":{},"modules/MediaServerModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":38,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GatewayModule.html":{},"modules/MediaServerModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["month",{"_index":270,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["more",{"_index":669,"title":{},"body":{"index.html":{}}}],["mosca",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["mr_${hash",{"_index":303,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["myśliwiec",{"_index":675,"title":{},"body":{"index.html":{}}}],["name",{"_index":23,"title":{},"body":{"classes/ApiResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"interfaces/InputData.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/OutputData.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"classes/RegisterDto.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":632,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":679,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/GatewayModule.html":{},"classes/GatewayProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/MediaServerModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["nestjs/websockets",{"_index":239,"title":{},"body":{"classes/GatewayProvider.html":{},"dependencies.html":{}}}],["never",{"_index":522,"title":{},"body":{"controllers/RoomController.html":{}}}],["new",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/InputData.html":{},"injectables/LocalStrategy.html":{},"modules/MediaServerModule.html":{},"interfaces/OutputData.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"coverage.html":{}}}],["newroom",{"_index":545,"title":{},"body":{"injectables/RoomService.html":{}}}],["nms",{"_index":358,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["node",{"_index":355,"title":{},"body":{"modules/MediaServerModule.html":{},"dependencies.html":{}}}],["node.js",{"_index":624,"title":{},"body":{"index.html":{}}}],["nodemediaserver",{"_index":354,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["null",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PropertyController.html":{}}}],["number",{"_index":16,"title":{},"body":{"classes/ApiResponse.html":{}}}],["occupants",{"_index":558,"title":{},"body":{"classes/UpdateRoomDto.html":{}}}],["onmoduleinit",{"_index":232,"title":{},"body":{"classes/GatewayProvider.html":{},"modules/MediaServerModule.html":{},"injectables/PrismaService.html":{}}}],["open",{"_index":657,"title":{},"body":{"index.html":{}}}],["optional",{"_index":25,"title":{},"body":{"classes/ApiResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["orderby",{"_index":476,"title":{},"body":{"injectables/PropertyService.html":{}}}],["origin",{"_index":241,"title":{},"body":{"classes/GatewayProvider.html":{}}}],["out",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GatewayModule.html":{},"modules/MediaServerModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["outputdata",{"_index":260,"title":{"interfaces/OutputData.html":{}},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"controllers/RoomController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["overview",{"_index":684,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":551,"title":{},"body":{"injectables/RoomService.html":{}}}],["ownerid",{"_index":222,"title":{},"body":{"classes/CreateRoomDto.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["ownership",{"_index":450,"title":{},"body":{"controllers/PropertyController.html":{}}}],["package",{"_index":590,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":416,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["param('id",{"_index":517,"title":{},"body":{"controllers/RoomController.html":{}}}],["param('room_id",{"_index":426,"title":{},"body":{"controllers/PropertyController.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"classes/ApiResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":317,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":319,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":310,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passthrough",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["patch",{"_index":505,"title":{},"body":{"controllers/RoomController.html":{}}}],["payload",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":328,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":329,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ping",{"_index":366,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["ping_timeout",{"_index":368,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["please",{"_index":667,"title":{},"body":{"index.html":{}}}],["port",{"_index":361,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["post",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"classes/GatewayProvider.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["post('create",{"_index":425,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["post('login",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["prisma",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PropertyService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["prisma.service",{"_index":393,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.usercreateinput",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":570,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma/client",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}}}],["prisma/prisma.service",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/MediaServerModule.html":{},"injectables/PropertyService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["prismaclient",{"_index":395,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":51,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":54,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"modules/MediaServerModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/PropertyService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":9,"title":{},"body":{"classes/ApiResponse.html":{},"injectables/AuthService.html":{},"modules/MediaServerModule.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{}}}],["production",{"_index":647,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":623,"title":{},"body":{"index.html":{}}}],["project",{"_index":658,"title":{},"body":{"index.html":{}}}],["promise",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/RoomController.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/ApiResponse.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"classes/GatewayProvider.html":{},"interfaces/InputData.html":{},"classes/LoginDto.html":{},"interfaces/OutputData.html":{},"controllers/PropertyController.html":{},"classes/RegisterDto.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"properties.html":{}}}],["property",{"_index":282,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"miscellaneous/typealiases.html":{}}}],["property.controller",{"_index":533,"title":{},"body":{"modules/RoomModule.html":{}}}],["property.dto",{"_index":420,"title":{},"body":{"controllers/PropertyController.html":{},"injectables/PropertyService.html":{}}}],["property.dto.ts",{"_index":218,"title":{},"body":{"classes/CreatePropertyDto.html":{},"coverage.html":{}}}],["property.dto.ts:2",{"_index":219,"title":{},"body":{"classes/CreatePropertyDto.html":{}}}],["property.name",{"_index":289,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"injectables/PropertyService.html":{}}}],["property.room_id",{"_index":472,"title":{},"body":{"injectables/PropertyService.html":{}}}],["property.service",{"_index":422,"title":{},"body":{"controllers/PropertyController.html":{},"modules/RoomModule.html":{}}}],["property.values.foreach((value",{"_index":286,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["property[0].id",{"_index":483,"title":{},"body":{"injectables/PropertyService.html":{}}}],["propertycontroller",{"_index":398,"title":{"controllers/PropertyController.html":{}},"body":{"controllers/PropertyController.html":{},"modules/RoomModule.html":{},"coverage.html":{}}}],["propertyexists",{"_index":431,"title":{},"body":{"controllers/PropertyController.html":{},"injectables/PropertyService.html":{}}}],["propertyexists(roomid",{"_index":466,"title":{},"body":{"injectables/PropertyService.html":{}}}],["propertyexists.length",{"_index":434,"title":{},"body":{"controllers/PropertyController.html":{}}}],["propertyid",{"_index":258,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["propertyname",{"_index":262,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["propertyservice",{"_index":421,"title":{"injectables/PropertyService.html":{}},"body":{"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"modules/RoomModule.html":{},"coverage.html":{},"overview.html":{}}}],["providers",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GatewayModule.html":{},"modules/MediaServerModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":11,"title":{},"body":{"classes/ApiResponse.html":{}}}],["query",{"_index":417,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["query('key",{"_index":446,"title":{},"body":{"controllers/PropertyController.html":{}}}],["query('name",{"_index":444,"title":{},"body":{"controllers/PropertyController.html":{}}}],["query('value",{"_index":445,"title":{},"body":{"controllers/PropertyController.html":{}}}],["read",{"_index":668,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":357,"title":{},"body":{"modules/MediaServerModule.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@request",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(req",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(user",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerdto",{"_index":174,"title":{"classes/RegisterDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["remove",{"_index":493,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["remove(@param('id",{"_index":527,"title":{},"body":{"controllers/RoomController.html":{}}}],["remove(id",{"_index":501,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["repository",{"_index":635,"title":{},"body":{"index.html":{}}}],["req",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["req.user",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["request.cookies['access_token",{"_index":323,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["res",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.cookie('access_token",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GatewayModule.html":{},"modules/MediaServerModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PropertyController.html":{}}}],["response.access_token",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["result",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"controllers/RoomController.html":{}}}],["results",{"_index":34,"title":{},"body":{"classes/ApiResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"modules/GatewayModule.html":{},"classes/GatewayProvider.html":{},"interfaces/InputData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"modules/MediaServerModule.html":{},"interfaces/OutputData.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"classes/RegisterDto.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/InputData.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/OutputData.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GatewayProvider.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/MediaServerModule.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["room",{"_index":386,"title":{"classes/Room.html":{}},"body":{"modules/MediaServerModule.html":{},"controllers/PropertyController.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"coverage.html":{}}}],["room.controller",{"_index":534,"title":{},"body":{"modules/RoomModule.html":{}}}],["room.dto",{"_index":507,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["room.dto.ts",{"_index":221,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["room.dto.ts:2",{"_index":223,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/UpdateRoomDto.html":{}}}],["room.dto.ts:3",{"_index":224,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["room.service",{"_index":423,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{}}}],["room/room.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/MediaServerModule.html":{}}}],["room/room.service",{"_index":356,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["room_id",{"_index":405,"title":{},"body":{"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"injectables/RoomService.html":{}}}],["roomcontroller",{"_index":489,"title":{"controllers/RoomController.html":{}},"body":{"controllers/RoomController.html":{},"modules/RoomModule.html":{},"coverage.html":{}}}],["roomid",{"_index":248,"title":{},"body":{"classes/GatewayProvider.html":{},"interfaces/InputData.html":{},"modules/MediaServerModule.html":{},"interfaces/OutputData.html":{},"injectables/PropertyService.html":{}}}],["roommodule",{"_index":52,"title":{"modules/RoomModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MediaServerModule.html":{},"modules/RoomModule.html":{},"modules.html":{},"overview.html":{}}}],["rooms",{"_index":491,"title":{},"body":{"controllers/RoomController.html":{}}}],["rooms/:room_id/property",{"_index":400,"title":{},"body":{"controllers/PropertyController.html":{}}}],["roomservice",{"_index":350,"title":{"injectables/RoomService.html":{}},"body":{"modules/MediaServerModule.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"coverage.html":{},"overview.html":{}}}],["rtmp",{"_index":360,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["run",{"_index":642,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":297,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["scalable",{"_index":628,"title":{},"body":{"index.html":{}}}],["secret",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["secretorkey",{"_index":326,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"classes/GatewayProvider.html":{},"modules/MediaServerModule.html":{},"dependencies.html":{},"index.html":{}}}],["server.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["server.module.ts",{"_index":352,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["server.module.ts:37",{"_index":353,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["server/media",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/MediaServerModule.html":{}}}],["session",{"_index":383,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["session.reject",{"_index":385,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["side",{"_index":629,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{}}}],["socket",{"_index":244,"title":{},"body":{"classes/GatewayProvider.html":{}}}],["socket.io",{"_index":237,"title":{},"body":{"classes/GatewayProvider.html":{},"dependencies.html":{}}}],["socket.join(roomid",{"_index":249,"title":{},"body":{"classes/GatewayProvider.html":{}}}],["socket.on('join",{"_index":247,"title":{},"body":{"classes/GatewayProvider.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ApiResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"modules/GatewayModule.html":{},"classes/GatewayProvider.html":{},"interfaces/InputData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"modules/MediaServerModule.html":{},"interfaces/OutputData.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"classes/RegisterDto.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":661,"title":{},"body":{"index.html":{}}}],["src/.../lib.ts",{"_index":619,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":618,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:40",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:30",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:37",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":344,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:2",{"_index":345,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:3",{"_index":346,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":484,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:2",{"_index":485,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:3",{"_index":486,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:4",{"_index":487,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/guards/jwt",{"_index":304,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":330,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":309,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:21",{"_index":314,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:8",{"_index":312,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":332,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:16",{"_index":336,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:9",{"_index":334,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/gateway/gateway.module.ts",{"_index":228,"title":{},"body":{"modules/GatewayModule.html":{}}}],["src/gateway/gateway.provider.ts",{"_index":230,"title":{},"body":{"classes/GatewayProvider.html":{},"coverage.html":{}}}],["src/gateway/gateway.provider.ts:14",{"_index":234,"title":{},"body":{"classes/GatewayProvider.html":{}}}],["src/gateway/gateway.provider.ts:16",{"_index":235,"title":{},"body":{"classes/GatewayProvider.html":{}}}],["src/main.ts",{"_index":583,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/media",{"_index":351,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":392,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service.ts",{"_index":394,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":396,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/response/index.ts",{"_index":6,"title":{},"body":{"classes/ApiResponse.html":{},"coverage.html":{}}}],["src/response/index.ts:2",{"_index":26,"title":{},"body":{"classes/ApiResponse.html":{}}}],["src/response/index.ts:3",{"_index":27,"title":{},"body":{"classes/ApiResponse.html":{}}}],["src/response/index.ts:4",{"_index":21,"title":{},"body":{"classes/ApiResponse.html":{}}}],["src/room/dto/create",{"_index":217,"title":{},"body":{"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"coverage.html":{}}}],["src/room/dto/update",{"_index":557,"title":{},"body":{"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["src/room/entities/room.entity.ts",{"_index":488,"title":{},"body":{"classes/Room.html":{},"coverage.html":{}}}],["src/room/property.controller.ts",{"_index":399,"title":{},"body":{"controllers/PropertyController.html":{},"coverage.html":{}}}],["src/room/property.controller.ts:20",{"_index":408,"title":{},"body":{"controllers/PropertyController.html":{}}}],["src/room/property.controller.ts:58",{"_index":411,"title":{},"body":{"controllers/PropertyController.html":{}}}],["src/room/property.controller.ts:74",{"_index":415,"title":{},"body":{"controllers/PropertyController.html":{}}}],["src/room/property.service.ts",{"_index":458,"title":{},"body":{"injectables/PropertyService.html":{},"coverage.html":{}}}],["src/room/property.service.ts:14",{"_index":463,"title":{},"body":{"injectables/PropertyService.html":{}}}],["src/room/property.service.ts:23",{"_index":465,"title":{},"body":{"injectables/PropertyService.html":{}}}],["src/room/property.service.ts:40",{"_index":467,"title":{},"body":{"injectables/PropertyService.html":{}}}],["src/room/property.service.ts:49",{"_index":469,"title":{},"body":{"injectables/PropertyService.html":{}}}],["src/room/property.service.ts:8",{"_index":461,"title":{},"body":{"injectables/PropertyService.html":{}}}],["src/room/room.controller.ts",{"_index":490,"title":{},"body":{"controllers/RoomController.html":{},"coverage.html":{}}}],["src/room/room.controller.ts:108",{"_index":503,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:18",{"_index":495,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:40",{"_index":497,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:57",{"_index":500,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.module.ts",{"_index":532,"title":{},"body":{"modules/RoomModule.html":{}}}],["src/room/room.service.ts",{"_index":535,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{}}}],["src/room/room.service.ts:20",{"_index":540,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:28",{"_index":543,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:44",{"_index":542,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:66",{"_index":544,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:7",{"_index":537,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:9",{"_index":538,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/user/user.module.ts",{"_index":563,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":565,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:10",{"_index":571,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:14",{"_index":568,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:7",{"_index":566,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/lib.ts",{"_index":253,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["start",{"_index":643,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":646,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":648,"title":{},"body":{"index.html":{}}}],["started",{"_index":622,"title":{"index.html":{}},"body":{}}],["starter",{"_index":634,"title":{},"body":{"index.html":{}}}],["statements",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":671,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":316,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["streampath",{"_index":379,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["streampath.split('/')[2",{"_index":381,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["string",{"_index":17,"title":{},"body":{"classes/ApiResponse.html":{},"injectables/AuthService.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"classes/GatewayProvider.html":{},"interfaces/InputData.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"interfaces/OutputData.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"classes/RegisterDto.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"miscellaneous/functions.html":{}}}],["string(value.value",{"_index":290,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["sub",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["successful",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["super",{"_index":320,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":662,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":682,"title":{},"body":{"modules.html":{}}}],["t",{"_index":18,"title":{},"body":{"classes/ApiResponse.html":{}}}],["table",{"_index":589,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":588,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":478,"title":{},"body":{"injectables/PropertyService.html":{}}}],["test",{"_index":651,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":654,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":653,"title":{},"body":{"index.html":{}}}],["tests",{"_index":650,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":660,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":397,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.login(req.user",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(req.body",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":341,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.code",{"_index":31,"title":{},"body":{"classes/ApiResponse.html":{}}}],["this.data",{"_index":33,"title":{},"body":{"classes/ApiResponse.html":{}}}],["this.gateway.server.to(roomid).emit('data",{"_index":480,"title":{},"body":{"injectables/PropertyService.html":{}}}],["this.jwtservice.sign(payload",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.message",{"_index":32,"title":{},"body":{"classes/ApiResponse.html":{}}}],["this.nms",{"_index":359,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["this.nms.getsession(id",{"_index":384,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["this.nms.on('prepublish",{"_index":378,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["this.nms.run",{"_index":388,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["this.prisma.property.create",{"_index":471,"title":{},"body":{"injectables/PropertyService.html":{}}}],["this.prisma.property.findmany",{"_index":473,"title":{},"body":{"injectables/PropertyService.html":{}}}],["this.prisma.property.update",{"_index":482,"title":{},"body":{"injectables/PropertyService.html":{}}}],["this.prisma.room.create",{"_index":546,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.room.delete",{"_index":556,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.room.findmany",{"_index":549,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.room.findunique",{"_index":550,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.room.update",{"_index":553,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.user.create",{"_index":574,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":573,"title":{},"body":{"injectables/UserService.html":{}}}],["this.propertyservice.create",{"_index":436,"title":{},"body":{"controllers/PropertyController.html":{}}}],["this.propertyservice.findall(room_id",{"_index":442,"title":{},"body":{"controllers/PropertyController.html":{}}}],["this.propertyservice.propertyexists",{"_index":432,"title":{},"body":{"controllers/PropertyController.html":{}}}],["this.propertyservice.update",{"_index":455,"title":{},"body":{"controllers/PropertyController.html":{}}}],["this.roomservice.create",{"_index":512,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.findall(user.userid",{"_index":515,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.findbykey(apikey",{"_index":387,"title":{},"body":{"modules/MediaServerModule.html":{}}}],["this.roomservice.findbykey(key",{"_index":453,"title":{},"body":{"controllers/PropertyController.html":{}}}],["this.roomservice.findone(id",{"_index":519,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.findone(room_id",{"_index":427,"title":{},"body":{"controllers/PropertyController.html":{}}}],["this.roomservice.remove(id",{"_index":528,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.update(id",{"_index":526,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.server.on('connection",{"_index":243,"title":{},"body":{"classes/GatewayProvider.html":{}}}],["this.usersservice.create",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":342,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["time",{"_index":261,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"injectables/PropertyService.html":{}}}],["topics",{"_index":554,"title":{},"body":{"injectables/RoomService.html":{}}}],["touch",{"_index":672,"title":{},"body":{"index.html":{}}}],["transformdata",{"_index":506,"title":{},"body":{"controllers/RoomController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["transformdata(inputdata",{"_index":283,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"miscellaneous/functions.html":{}}}],["transformdata(room",{"_index":521,"title":{},"body":{"controllers/RoomController.html":{}}}],["transformedproperties",{"_index":284,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["transformedproperties.flat",{"_index":295,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["true",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"modules/MediaServerModule.html":{},"injectables/RoomService.html":{}}}],["try",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["twitter",{"_index":678,"title":{},"body":{"index.html":{}}}],["type",{"_index":24,"title":{},"body":{"classes/ApiResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePropertyDto.html":{},"classes/CreateRoomDto.html":{},"classes/GatewayProvider.html":{},"interfaces/InputData.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"interfaces/OutputData.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"classes/RegisterDto.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":693,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":633,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":338,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":406,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["uniqueattr",{"_index":572,"title":{},"body":{"injectables/UserService.html":{}}}],["unit",{"_index":649,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":30,"title":{},"body":{"classes/ApiResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/InputData.html":{},"injectables/JwtStrategy.html":{},"interfaces/OutputData.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":692,"title":{},"body":{"properties.html":{}}}],["update",{"_index":403,"title":{},"body":{"controllers/PropertyController.html":{},"injectables/PropertyService.html":{}}}],["update(@param('id",{"_index":524,"title":{},"body":{"controllers/RoomController.html":{}}}],["update(email",{"_index":301,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["update(id",{"_index":552,"title":{},"body":{"injectables/RoomService.html":{}}}],["update(name",{"_index":412,"title":{},"body":{"controllers/PropertyController.html":{}}}],["update(roomid",{"_index":468,"title":{},"body":{"injectables/PropertyService.html":{}}}],["updated",{"_index":457,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["updatedat",{"_index":255,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["updatedproperty",{"_index":454,"title":{},"body":{"controllers/PropertyController.html":{}}}],["updateroomdto",{"_index":525,"title":{"classes/UpdateRoomDto.html":{}},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["updateroomdto.occupants",{"_index":555,"title":{},"body":{"injectables/RoomService.html":{}}}],["updating",{"_index":452,"title":{},"body":{"controllers/PropertyController.html":{}}}],["use",{"_index":518,"title":{},"body":{"controllers/RoomController.html":{}}}],["useguards",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["useguards(jwtauthguard",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["useguards(jwtauthguard)@get('list",{"_index":410,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@get('read/:id",{"_index":499,"title":{},"body":{"controllers/RoomController.html":{}}}],["useguards(jwtauthguard)@post('create",{"_index":407,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["useguards(localauthguard",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('login",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["user.email",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":564,"title":{},"body":{"modules/UserModule.html":{}}}],["user.userid",{"_index":428,"title":{},"body":{"controllers/PropertyController.html":{},"controllers/RoomController.html":{}}}],["user/user.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexists",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":327,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usermodule",{"_index":53,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["usernamefield",{"_index":339,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userservice",{"_index":166,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["utils/lib",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"controllers/RoomController.html":{}}}],["validate",{"_index":311,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":335,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":313,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":259,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"controllers/PropertyController.html":{},"injectables/PropertyService.html":{}}}],["values",{"_index":257,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{},"injectables/PropertyService.html":{},"injectables/RoomService.html":{}}}],["values.push",{"_index":287,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["verify",{"_index":449,"title":{},"body":{"controllers/PropertyController.html":{}}}],["version",{"_index":690,"title":{},"body":{"properties.html":{}}}],["void",{"_index":236,"title":{},"body":{"classes/GatewayProvider.html":{},"modules/MediaServerModule.html":{}}}],["watch",{"_index":644,"title":{},"body":{"index.html":{}}}],["website",{"_index":676,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":238,"title":{},"body":{"classes/GatewayProvider.html":{}}}],["websocketserver",{"_index":233,"title":{},"body":{"classes/GatewayProvider.html":{}}}],["yarn",{"_index":638,"title":{},"body":{"index.html":{}}}],["year",{"_index":275,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["you'd",{"_index":665,"title":{},"body":{"index.html":{}}}],["zero",{"_index":273,"title":{},"body":{"interfaces/InputData.html":{},"interfaces/OutputData.html":{}}}],["zoom",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GatewayModule.html":{},"modules/MediaServerModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ApiResponse.html":{"url":"classes/ApiResponse.html","title":"class - ApiResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Response/index.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                code\n                            \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Private\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(code: number, message: string, data: T | )\n                    \n                \n                        \n                            \n                                Defined in src/Response/index.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T | \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/Response/index.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T | \n\n                    \n                \n                    \n                        \n                                Defined in src/Response/index.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Response/index.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export default class ApiResponse {\n  private code: number;\n  private message: string;\n  public data: T | unknown;\n\n  constructor(code: number, message: string, data: T | unknown) {\n    this.code = code;\n    this.message = message;\n    this.data = data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nGatewayModule\n\nGatewayModule\n\nAppModule -->\n\nGatewayModule->AppModule\n\n\n\n\n\nMediaServerModule\n\nMediaServerModule\n\nAppModule -->\n\nMediaServerModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nRoomModule\n\nRoomModule\n\nAppModule -->\n\nRoomModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            GatewayModule\n                        \n                        \n                            MediaServerModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            RoomModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { MediaServerModule } from './media-server/media-server.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { PrismaService } from './prisma/prisma.service';\nimport { RoomModule } from './room/room.module';\nimport { GatewayModule } from './gateway/gateway.module';\nimport { UserModule } from './user/user.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [MediaServerModule, RoomModule, PrismaModule, GatewayModule, UserModule, AuthModule],\n  providers: [PrismaService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Response } from 'express';\n\nimport { Body, Controller, Get, Post, Request, Res, UseGuards } from '@nestjs/common';\n\nimport ApiResponse from '../Response';\nimport { AuthService } from './auth.service';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  async login(@Request() req, @Res({ passthrough: true }) res: Response) {\n    try {\n      const response = await this.authService.login(req.user);\n      res.cookie('access_token', response.access_token, {\n        httpOnly: true,\n      });\n\n      return new ApiResponse(200, 'Login successful', {\n        user: req.user,\n        access_token: response.access_token,\n      });\n    } catch (err) {\n      console.log(err);\n      return new ApiResponse(500, 'Internal server error', null);\n    }\n  }\n\n  @Post('register')\n  async register(@Request() req) {\n    return this.authService.register(req.body);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\n\nimport { UserModule } from '../user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\n\n@Module({\n  imports: [\n    UserModule,\n    PassportModule,\n    JwtModule.register({\n      secret: 'secret',\n      signOptions: { expiresIn: '30d' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(user: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt';\n\nimport { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Prisma } from '@prisma/client';\n\nimport ApiResponse from '../Response';\nimport { UserService } from '../user/user.service';\nimport { generateApiKey } from '../utils/lib';\nimport { RegisterDto } from './dto/register.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UserService,\n    private jwtService: JwtService,\n  ) {}\n\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersService.findOne({ email });\n\n    if (user && (await bcrypt.compare(pass, user.password))) {\n      const { password, ...result } = user;\n      return result;\n    }\n\n    return null;\n  }\n\n  async login(user: { id: string; email: string }) {\n    const payload = { username: user.email, sub: user.id };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n\n  async register(user: RegisterDto) {\n    //check if user already exists\n    const userExists = await this.usersService.findOne({ email: user.email });\n    if (userExists) {\n      return new ApiResponse(400, 'User already exists', null);\n    }\n\n    const hashedPassword = await bcrypt.hash(user.password, 10);\n    const apiKey = await generateApiKey(user.email);\n\n    const createdUser = await this.usersService.create({\n      ...user,\n      password: hashedPassword,\n      apiKey,\n    } as Prisma.UserCreateInput);\n\n    return new ApiResponse(201, 'User created successfully', createdUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePropertyDto.html":{"url":"classes/CreatePropertyDto.html","title":"class - CreatePropertyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePropertyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/dto/create-property.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/create-property.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreatePropertyDto {\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoomDto.html":{"url":"classes/CreateRoomDto.html","title":"class - CreateRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/dto/create-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                    Optional\n                                ownerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/create-room.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ownerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/create-room.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateRoomDto {\n  name: string;\n  ownerId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GatewayModule.html":{"url":"modules/GatewayModule.html","title":"module - GatewayModule","body":"\n                   \n\n\n\n\n    Modules\n    GatewayModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GatewayModule\n\n\n\ncluster_GatewayModule_exports\n\n\n\n\nGatewayProvider \n\nGatewayProvider \n\n\n\nGatewayModule\n\nGatewayModule\n\nGatewayProvider  -->\n\nGatewayModule->GatewayProvider \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/gateway/gateway.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            GatewayProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        \nimport { Module } from '@nestjs/common';\n\nimport { GatewayProvider } from './gateway.provider';\n\n@Module({\n  providers: [GatewayProvider],\n  exports: [GatewayProvider],\n})\nexport class GatewayModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GatewayProvider.html":{"url":"classes/GatewayProvider.html","title":"class - GatewayProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GatewayProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gateway/gateway.provider.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnModuleInit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gateway/gateway.provider.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/gateway/gateway.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Server } from 'socket.io';\n\nimport { OnModuleInit } from '@nestjs/common';\nimport { WebSocketGateway, WebSocketServer } from '@nestjs/websockets';\n\n@WebSocketGateway({\n  cors: {\n    origin: 'http://localhost:5173',\n    methods: ['GET', 'POST'],\n  },\n})\nexport class GatewayProvider implements OnModuleInit {\n  @WebSocketServer()\n  server: Server;\n\n  onModuleInit() {\n    this.server.on('connection', (socket) => {\n      console.log('Client connected');\n      socket.on('join', (roomId: string) => {\n        socket.join(roomId);\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InputData.html":{"url":"interfaces/InputData.html","title":"interface - InputData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InputData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/lib.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            properties\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        properties:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as crypto from 'crypto';\n\nexport interface InputData {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n  properties: {\n    id: string;\n    roomId: string;\n    name: string;\n    createdAt: string;\n    updatedAt: string;\n    values: {\n      id: string;\n      propertyId: string;\n      value: unknown;\n      createdAt: string;\n      updatedAt: string;\n    }[];\n  }[];\n}\n\nexport interface OutputData {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n  properties: {\n    time: string;\n    [propertyName: string]: string;\n  }[];\n}\n\nexport function formatDate(dateString: string): string {\n  const date = new Date(dateString);\n  const day = date.getDate().toString().padStart(2, '0');\n  const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Month is zero-indexed\n  const year = date.getFullYear();\n  const hours = date.getHours().toString().padStart(2, '0');\n  const minutes = date.getMinutes().toString().padStart(2, '0');\n\n  return `${day}-${month}-${year}, ${hours}:${minutes}`;\n}\n\ntype property = { time: string; [propertyName: string]: string };\n\nexport function transformData(inputData: InputData): OutputData {\n  const data = inputData;\n\n  const transformedProperties = data.properties.map((property) => {\n    const values: property[] = [];\n\n    property.values.forEach((value) => {\n      values.push({\n        time: formatDate(value.createdAt),\n        [property.name]: String(value.value),\n      });\n    });\n\n    return values;\n  });\n\n  return {\n    id: data.id,\n    name: data.name,\n    createdAt: data.createdAt,\n    updatedAt: data.updatedAt,\n    properties: transformedProperties.flat(),\n  };\n}\n\nexport function generateApiKey(email) {\n  const salt = crypto.randomBytes(16).toString('hex');\n  const hash = crypto\n    .createHash('sha256')\n    .update(email + salt)\n    .digest('hex');\n\n  return `mr_${hash}`;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Request } from 'express';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request.cookies['access_token'];\n        },\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: 'secret',\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\n\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\n\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const _user = await this.authService.validateUser(email, password);\n    if (!_user) {\n      throw new UnauthorizedException();\n    }\n\n    const { apiKey, ...user } = _user;\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginDto {\n  email: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MediaServerModule.html":{"url":"modules/MediaServerModule.html","title":"module - MediaServerModule","body":"\n                   \n\n\n\n\n    Modules\n    MediaServerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MediaServerModule\n\n\n\ncluster_MediaServerModule_imports\n\n\n\ncluster_MediaServerModule_providers\n\n\n\n\nRoomModule\n\nRoomModule\n\n\n\nMediaServerModule\n\nMediaServerModule\n\nMediaServerModule -->\n\nRoomModule->MediaServerModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nMediaServerModule -->\n\nPrismaService->MediaServerModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nMediaServerModule -->\n\nRoomService->MediaServerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/media-server/media-server.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            RoomService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RoomModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/media-server/media-server.module.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import * as NodeMediaServer from 'node-media-server';\n\nimport { Module, OnModuleInit } from '@nestjs/common';\n\nimport { PrismaService } from '../prisma/prisma.service';\nimport { RoomModule } from '../room/room.module';\nimport { RoomService } from '../room/room.service';\n\n@Module({\n  imports: [RoomModule],\n  providers: [RoomService, PrismaService],\n})\nexport class MediaServerModule implements OnModuleInit {\n  private readonly nms: NodeMediaServer;\n\n  constructor(private roomService: RoomService) {\n    this.nms = new NodeMediaServer({\n      rtmp: {\n        port: 1935,\n        chunk_size: 60000,\n        gop_cache: true,\n        ping: 30,\n        ping_timeout: 60,\n      },\n      http: {\n        port: 8000,\n        allow_origin: '*',\n      },\n      auth: {\n        api: true,\n        api_user: 'admin',\n        api_pass: 'dg2024',\n      },\n    });\n  }\n\n  onModuleInit() {\n    this.nms.on('prePublish', async (id, StreamPath, args) => {\n      const roomId = StreamPath.split('/')[2];\n      const apiKey = args.key;\n\n      if (!apiKey || !roomId) {\n        const session = this.nms.getSession(id);\n        session.reject();\n      }\n\n      const room = await this.roomService.findByKey(apiKey, roomId);\n\n      if (!room) {\n        const session = this.nms.getSession(id);\n        session.reject();\n      }\n    });\n\n    this.nms.run();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OutputData.html":{"url":"interfaces/OutputData.html","title":"interface - OutputData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OutputData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/lib.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            properties\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        properties:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as crypto from 'crypto';\n\nexport interface InputData {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n  properties: {\n    id: string;\n    roomId: string;\n    name: string;\n    createdAt: string;\n    updatedAt: string;\n    values: {\n      id: string;\n      propertyId: string;\n      value: unknown;\n      createdAt: string;\n      updatedAt: string;\n    }[];\n  }[];\n}\n\nexport interface OutputData {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n  properties: {\n    time: string;\n    [propertyName: string]: string;\n  }[];\n}\n\nexport function formatDate(dateString: string): string {\n  const date = new Date(dateString);\n  const day = date.getDate().toString().padStart(2, '0');\n  const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Month is zero-indexed\n  const year = date.getFullYear();\n  const hours = date.getHours().toString().padStart(2, '0');\n  const minutes = date.getMinutes().toString().padStart(2, '0');\n\n  return `${day}-${month}-${year}, ${hours}:${minutes}`;\n}\n\ntype property = { time: string; [propertyName: string]: string };\n\nexport function transformData(inputData: InputData): OutputData {\n  const data = inputData;\n\n  const transformedProperties = data.properties.map((property) => {\n    const values: property[] = [];\n\n    property.values.forEach((value) => {\n      values.push({\n        time: formatDate(value.createdAt),\n        [property.name]: String(value.value),\n      });\n    });\n\n    return values;\n  });\n\n  return {\n    id: data.id,\n    name: data.name,\n    createdAt: data.createdAt,\n    updatedAt: data.updatedAt,\n    properties: transformedProperties.flat(),\n  };\n}\n\nexport function generateApiKey(email) {\n  const salt = crypto.randomBytes(16).toString('hex');\n  const hash = crypto\n    .createHash('sha256')\n    .update(email + salt)\n    .digest('hex');\n\n  return `mr_${hash}`;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PropertyController.html":{"url":"controllers/PropertyController.html","title":"controller - PropertyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PropertyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/property.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                rooms/:room_id/property\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPropertyDto: CreatePropertyDto, room_id: string, undefined: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/room/property.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPropertyDto\n                                            \n                                                            CreatePropertyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                room_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(room_id: string, undefined: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('list')\n                \n            \n\n                    \n                        \n                            Defined in src/room/property.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                room_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(name: string, value: string, key: string, room_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('update')\n                \n            \n\n                    \n                        \n                            Defined in src/room/property.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                room_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Request } from 'express';\n\nimport { Body, Controller, Get, Param, Post, Query, Req, UseGuards } from '@nestjs/common';\n\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport ApiResponse from '../Response';\nimport { CreatePropertyDto } from './dto/create-property.dto';\nimport { PropertyService } from './property.service';\nimport { RoomService } from './room.service';\n\n@Controller('rooms/:room_id/property')\nexport class PropertyController {\n  constructor(\n    private readonly propertyService: PropertyService,\n    private readonly roomService: RoomService,\n  ) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Post('create')\n  async create(\n    @Body() createPropertyDto: CreatePropertyDto,\n    @Param('room_id') room_id: string,\n    @Req() { user }: Request,\n  ) {\n    try {\n      const room = await this.roomService.findOne(room_id, user.userId);\n\n      if (!room) {\n        return new ApiResponse(401, 'Room not found', null);\n      }\n\n      //check if the property already exists\n      const propertyExists = await this.propertyService.propertyExists(\n        room_id,\n        createPropertyDto.name,\n      );\n\n      if (propertyExists.length > 0) {\n        return new ApiResponse(400, 'Property already exists', null);\n      }\n\n      const createdProperty = await this.propertyService.create({\n        ...createPropertyDto,\n        room_id,\n      });\n      return new ApiResponse(\n        201,\n        'Property created successfully',\n        createdProperty,\n      );\n    } catch (e) {\n      return new ApiResponse(500, e.message, null);\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('list')\n  async findAll(@Param('room_id') room_id: string, @Req() { user }: Request) {\n    try {\n      const room = await this.roomService.findOne(room_id, user.userId);\n\n      if (!room) {\n        return new ApiResponse(401, 'Room not found', null);\n      }\n\n      const properties = await this.propertyService.findAll(room_id);\n      return new ApiResponse(200, 'Properties found', properties);\n    } catch (err) {\n      return new ApiResponse(500, err.message, null);\n    }\n  }\n\n  @Get('update')\n  async update(\n    @Query('name') name: string,\n    @Query('value') value: string,\n    @Query('key') key: string,\n    @Param('room_id') room_id: string,\n  ) {\n    try {\n      if (!key) return new ApiResponse(403, 'API Key missing', null);\n      //verify ownership of the room before updating\n      const room = await this.roomService.findByKey(key, room_id);\n\n      if (!room) {\n        return new ApiResponse(401, 'Room not found', null);\n      }\n\n      const updatedProperty = await this.propertyService.update(\n        room_id,\n        name,\n        value,\n      );\n      return new ApiResponse(\n        200,\n        'Property updated successfully',\n        updatedProperty,\n      );\n    } catch (e) {\n      return new ApiResponse(500, e.message, null);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PropertyService.html":{"url":"injectables/PropertyService.html","title":"injectable - PropertyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PropertyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/property.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                propertyExists\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, gateway: GatewayProvider)\n                    \n                \n                        \n                            \n                                Defined in src/room/property.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gateway\n                                                  \n                                                        \n                                                                        GatewayProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(property)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/property.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                property\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(roomId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/property.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        propertyExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    propertyExists(roomId: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/property.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(roomId: string, name: string, value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/property.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport { GatewayProvider } from '../gateway/gateway.provider';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { CreatePropertyDto } from './dto/create-property.dto';\n\n@Injectable()\nexport class PropertyService {\n  constructor(\n    private prisma: PrismaService,\n    private readonly gateway: GatewayProvider,\n  ) {}\n\n  async create(property: CreatePropertyDto & { room_id: string }) {\n    return await this.prisma.property.create({\n      data: {\n        name: property.name,\n        roomId: property.room_id,\n      },\n    });\n  }\n\n  async findAll(roomId: string) {\n    return await this.prisma.property.findMany({\n      where: {\n        roomId,\n      },\n      include: {\n        //only the last value\n        values: {\n          orderBy: {\n            createdAt: 'desc',\n          },\n          take: 1,\n        },\n      },\n    });\n  }\n\n  async propertyExists(roomId: string, name: string) {\n    return await this.prisma.property.findMany({\n      where: {\n        roomId,\n        name,\n      },\n    });\n  }\n\n  async update(roomId: string, name: string, value: string) {\n    this.gateway.server.to(roomId).emit('data', {\n      time: new Date().toISOString(),\n      [name]: value,\n    });\n\n    const property = await this.prisma.property.findMany({\n      where: {\n        roomId,\n        name,\n      },\n    });\n\n    return await this.prisma.property.update({\n      where: {\n        roomId,\n        id: property[0].id,\n      },\n      data: {\n        values: {\n          create: {\n            value,\n          },\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RegisterDto {\n  email: string;\n  name: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Room.html":{"url":"classes/Room.html","title":"class - Room","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Room\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/entities/room.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Room {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoomController.html":{"url":"controllers/RoomController.html","title":"controller - RoomController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoomController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/room.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                rooms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createRoomDto: CreateRoomDto, undefined: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createRoomDto\n                                            \n                                                            CreateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('list')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, undefined: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('read/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/room/room.controller.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Request } from 'express';\n\nimport {\n    Body, Controller, Delete, Get, Param, Patch, Post, Query, Req, UseGuards\n} from '@nestjs/common';\n\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { OutputData, transformData } from '../utils/lib';\nimport { CreateRoomDto } from './dto/create-room.dto';\nimport { RoomService } from './room.service';\n\n@Controller('rooms')\nexport class RoomController {\n  constructor(private readonly roomService: RoomService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Post('create')\n  async create(@Body() createRoomDto: CreateRoomDto, @Req() { user }: Request) {\n    try {\n      console.log('User', user);\n      const createdRoom = await this.roomService.create({\n        ...createRoomDto,\n        ownerId: user.userId,\n      });\n      return {\n        code: 201,\n        message: 'Room created successfully',\n        data: createdRoom,\n      };\n    } catch (e) {\n      return {\n        code: 500,\n        message: e.message,\n      };\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('list')\n  async findAll(@Req() { user }: Request) {\n    try {\n      const rooms = await this.roomService.findAll(user.userId);\n      return {\n        code: 200,\n        data: rooms,\n      };\n    } catch (err) {\n      return {\n        code: 500,\n        message: err.message,\n      };\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('read/:id')\n  async findOne(\n    @Param('id') id: string,\n    @Req() { user }: Request,\n  ): Promise {\n    // Use OutputData as the return type\n    try {\n      const room = await this.roomService.findOne(id, user.userId);\n      if (!room) {\n        return {\n          code: 404,\n          message: 'Room not found',\n        };\n      }\n\n      const result = await transformData(room as never);\n\n      return {\n        code: 200,\n        message: 'Room found',\n        data: result,\n      };\n    } catch (err) {\n      return {\n        code: 500,\n        message: err.message,\n      };\n    }\n  }\n\n  // @Get('update/:id')\n  // async update(@Param('id') id: string, @Query() query: UpdateRoomDto) {\n  //   try {\n  //     await this.roomService.update(id, query);\n\n  //     return {\n  //       code: 200,\n  //       message: 'Room updated successfully',\n  //     };\n  //   } catch (err) {\n  //     return {\n  //       code: 500,\n  //       message: err.message,\n  //     };\n  //   }\n  // }\n\n  @Delete('/delete/:id')\n  async remove(@Param('id') id: string) {\n    return this.roomService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoomModule.html":{"url":"modules/RoomModule.html","title":"module - RoomModule","body":"\n                   \n\n\n\n\n    Modules\n    RoomModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoomModule\n\n\n\ncluster_RoomModule_providers\n\n\n\ncluster_RoomModule_imports\n\n\n\n\nGatewayModule\n\nGatewayModule\n\n\n\nRoomModule\n\nRoomModule\n\nRoomModule -->\n\nGatewayModule->RoomModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nRoomModule -->\n\nPrismaModule->RoomModule\n\n\n\n\n\nPropertyService\n\nPropertyService\n\nRoomModule -->\n\nPropertyService->RoomModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nRoomModule -->\n\nRoomService->RoomModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/room/room.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PropertyService\n                        \n                        \n                            RoomService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoomController\n                        \n                        \n                            PropertyController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            GatewayModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { GatewayModule } from '../gateway/gateway.module';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { PropertyController } from './property.controller';\nimport { PropertyService } from './property.service';\nimport { RoomController } from './room.controller';\nimport { RoomService } from './room.service';\n\n@Module({\n  imports: [PrismaModule, GatewayModule],\n  controllers: [RoomController, PropertyController],\n  providers: [RoomService, PropertyService],\n})\nexport class RoomModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoomService.html":{"url":"injectables/RoomService.html","title":"injectable - RoomService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoomService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/room.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByKey\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/room/room.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createRoomDto: CreateRoomDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createRoomDto\n                                            \n                                                            CreateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(ownerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ownerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByKey(apiKey: string, room_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                apiKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                room_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, ownerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ownerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/room/room.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport { PrismaService } from '../prisma/prisma.service';\nimport { CreateRoomDto } from './dto/create-room.dto';\n\n@Injectable()\nexport class RoomService {\n  constructor(private prisma: PrismaService) {}\n  async create(createRoomDto: CreateRoomDto) {\n    const newRoom = await this.prisma.room.create({\n      data: {\n        name: createRoomDto.name,\n        ownerId: createRoomDto.ownerId,\n      },\n    });\n\n    return newRoom;\n  }\n\n  async findAll(ownerId: string) {\n    return await this.prisma.room.findMany({\n      where: {\n        ownerId,\n      },\n    });\n  }\n\n  async findOne(id: string, ownerId: string) {\n    return await this.prisma.room.findUnique({\n      where: {\n        id,\n        ownerId,\n      },\n      include: {\n        properties: {\n          include: {\n            values: true,\n          },\n        },\n      },\n    });\n  }\n\n  async findByKey(apiKey: string, room_id: string) {\n    return await this.prisma.room.findUnique({\n      where: {\n        owner: {\n          apiKey,\n        },\n        id: room_id,\n      },\n    });\n  }\n\n  // async update(id: string, updateRoomDto: UpdateRoomDto) {\n  //   return await this.prisma.room.update({\n  //     where: {\n  //       id,\n  //     },\n  //     data: {\n  //       topics: updateRoomDto.occupants,\n  //     },\n  //   });\n  // }\n\n  async remove(id: string) {\n    return await this.prisma.room.delete({\n      where: {\n        id,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoomDto.html":{"url":"classes/UpdateRoomDto.html","title":"class - UpdateRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/room/dto/update-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                occupants\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        occupants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/room/dto/update-room.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UpdateRoomDto {\n  occupants: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [PrismaModule],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: Prisma.UserCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Prisma.UserCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(uniqueAttr: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                uniqueAttr\n                                            \n                                                        Prisma.UserWhereUniqueInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\n\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Injectable()\nexport class UserService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async findOne(uniqueAttr: Prisma.UserWhereUniqueInput) {\n    return await this.prisma.user.findUnique({ where: uniqueAttr });\n  }\n\n  async create(data: Prisma.UserCreateInput) {\n    return await this.prisma.user.create({ data });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/Response/index.ts\n            \n            class\n            ApiResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/gateway/gateway.provider.ts\n            \n            class\n            GatewayProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/room/dto/create-property.dto.ts\n            \n            class\n            CreatePropertyDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/room/dto/create-room.dto.ts\n            \n            class\n            CreateRoomDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/room/dto/update-room.dto.ts\n            \n            class\n            UpdateRoomDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/room/entities/room.entity.ts\n            \n            class\n            Room\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/room/property.controller.ts\n            \n            controller\n            PropertyController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/room/property.service.ts\n            \n            injectable\n            PropertyService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/room/room.controller.ts\n            \n            controller\n            RoomController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/room/room.service.ts\n            \n            injectable\n            RoomService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/lib.ts\n            \n            interface\n            InputData\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/lib.ts\n            \n            interface\n            OutputData\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/lib.ts\n            \n            function\n            formatDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/lib.ts\n            \n            function\n            generateApiKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/lib.ts\n            \n            function\n            transformData\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/platform-socket.io : ^10.3.2\n        \n            @nestjs/websockets : ^10.3.2\n        \n            @prisma/client : ^5.9.1\n        \n            bcrypt : ^5.1.1\n        \n            cookie-parser : ^1.4.6\n        \n            crypto : ^1.0.1\n        \n            mosca : ^2.8.3\n        \n            node-media-server : ^2.6.2\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            formatDate   (src/.../lib.ts)\n                        \n                        \n                            generateApiKey   (src/.../lib.ts)\n                        \n                        \n                            transformData   (src/.../lib.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/lib.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        formatDate\n                        \n                    \n                \n            \n            \n                \nformatDate(dateString: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dateString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateApiKey\n                        \n                    \n                \n            \n            \n                \ngenerateApiKey(email)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transformData\n                        \n                    \n                \n            \n            \n                \ntransformData(inputData: InputData)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inputData\n                                            \n                                                            InputData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         OutputData\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GatewayModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MediaServerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoomModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_GatewayModule\n\n\n\ncluster_GatewayModule_exports\n\n\n\ncluster_MediaServerModule\n\n\n\ncluster_MediaServerModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_RoomModule\n\n\n\ncluster_RoomModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nGatewayModule\n\nGatewayModule\n\n\n\nRoomModule\n\nRoomModule\n\nRoomModule -->\n\nGatewayModule->RoomModule\n\n\n\nAppModule -->\n\nGatewayModule->AppModule\n\n\n\n\n\nGatewayProvider \n\nGatewayProvider \n\nGatewayProvider  -->\n\nGatewayModule->GatewayProvider \n\n\n\n\n\nMediaServerModule\n\nMediaServerModule\n\nAppModule -->\n\nMediaServerModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nRoomModule -->\n\nPrismaModule->RoomModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaModule->UserModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nMediaServerModule -->\n\nRoomModule->MediaServerModule\n\n\n\nAppModule -->\n\nRoomModule->AppModule\n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nMediaServerModule -->\n\nPrismaService->MediaServerModule\n\n\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nMediaServerModule -->\n\nRoomService->MediaServerModule\n\n\n\nRoomModule -->\n\nRoomService->RoomModule\n\n\n\n\n\nPropertyService\n\nPropertyService\n\nRoomModule -->\n\nPropertyService->RoomModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            property   (src/.../lib.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/lib.ts\n    \n    \n        \n            \n                \n                    \n                    property\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
